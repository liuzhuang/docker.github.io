amd64: |
  AMD64 是 AMD 对 Intel x86 架构的 64 位扩展，也称为 x86_64（或 x86-64）。
arm64: |
  ARM64 是 ARM CPU 架构的 64 位扩展。苹果机采用arm64架构。
base image: |
  一个 **base image** 在 Dockerfile 中没有声明父镜像. 它是使用带有 `FROM scratch` 指令的 Dockerfile 创建。
btrfs: |
  btrfs（B 树文件系统）是Docker 支持作为存储后端的 Linux [文件系统](#filesystem)。它是一个 [写时复制](https://en.wikipedia.org/wiki/Copy-on-write) 文件系统。
build: |
  build 是使用Dockerfile构建 Docker 镜像的过程。构建使用 [Dockerfile](#dockerfile). 和“上下文”。上下文是构建映像的目录中的一组文件。
cgroups: |
  cgroups 是一个 Linux 内核特性，它限制、考虑和隔离进程集合的资源使用（CPU、内存、磁盘 I/O、网络等）。Docker 依靠 cgroups 来控制和隔离资源限制。

  *又称 : control groups*
cluster: |
  集群是一组协同工作以运行工作负载并提供高可用性的机器。
Compose: |
  [Compose](https://github.com/docker/compose) 是一个使用 Docker 定义和运行复杂应用程序的工具。
  使用 Compose，您可以在单个文件中定义一个多容器应用程序，然后在单个命令中启动您的应用程序，该命令执行运行所需的所有操作。

  *又称 : docker-compose
copy-on-write: |
  Docker对镜像和容器使用 [写时复制](/storage/storagedriver/#the-copy-on-write-cow-strategy) 技术和联合文件系统来优化资源和提高性能。一个实体的多个副本共享同一个实例，每个副本仅对其唯一层进行特定更改。

  多个容器可以共享对同一个镜像的访问，并在可写层上进行特定于容器的更改，当容器被删除时，该可写层将被删除。这加快了容器启动时间和性能。

  镜像本质上是文件系统层，通常基于可写层下的基本镜像，并由与基本镜像的不同层构成。这最大限度地减少了映像的占用空间并实现了共享开发。

  有关 Docker 上下文中写入时复制的更多信息，请参阅[了解映像、容器和存储驱动程序](/storage/storagedriver/)。
container: |
  容器是 [docker image](#image) 的运行时实例。

  一个 Docker 容器包括

  - 一个 Docker 镜像
  - 一个执行环境
  - 一套标准的指令
 
  这个概念是从运输集装箱借来的，集装箱定义了全球运输货物的标准。Docker 定义了发布软件的标准。
Docker: |
  术语 Docker 可以指

  - Docker 项目作为一个整体，它是一个供开发人员和系统管理员开发、发布和运行应用程序的平台
  - 运行在管理镜像和容器的主机上的 docker 守护进程（也称为 Docker 引擎）
Docker Desktop for Mac: |
  [Docker Desktop for Mac](/desktop/mac/) 是一个易于安装的轻量级 Docker 开发环境，专为 Mac 设计。
  作为 Mac 原生应用程序，Docker Desktop for Mac 使用 macOS 管理程序框架、网络和文件系统。
  如果您想在 Mac 上构建、调试、测试、打包和发布 Dockerized 应用程序，这是最好的解决方案。
Docker Desktop for Windows: |
  [Docker Desktop for Windows](/desktop/windows/) 是一个易于安装的轻量级 Docker 开发环境，专为支持 WSL 2 和 Microsoft Hyper-V 的 Windows 系统而设计。
  Windows 版 Docker 桌面使用 WSL 2 或 Hyper-V 进行虚拟化。
  如果您想从 Windows 机器构建、调试、测试、打包和交付 Docker 化的应用程序，Docker Desktop for Windows 是最好的解决方案。
Docker Hub: |
  The [Docker Hub](https://hub.docker.com/) 是与泊坞窗及其组件的工作集中资源。它提供以下服务
  - 用于托管 Docker 映像的注册表
  - 用户认证
  - 自动化图像构建和工作流工具，例如构建触发器和网络钩子
  - 与 GitHub 和 Bitbucket 集成
  - 安全漏洞扫描
Dockerfile: |
  Dockerfile 是一个文本文档，其中包含您通常手动执行以构建 Docker 映像的所有命令。Docker 可以通过读取 Dockerfile 中的指令自动构建镜像。
ENTRYPOINT: |
  在 Dockerfile 中，anENTRYPOINT是要运行的命令的第一部分的可选定义。
  如果你希望你的Dockerfile是没有指定其他参数可运行的docker run命令，你必须指定ENTRYPOINT，CMD或两者兼而有之。
  In a Dockerfile, an `ENTRYPOINT` is an optional definition for the first part
  of the command to be run. If you want your Dockerfile to be runnable without
  specifying additional arguments to the `docker run` command, you must specify
  either `ENTRYPOINT`, `CMD`, or both.

  - 如果ENTRYPOINT指定，则将其设置为单个命令。大多数官方 Docker 镜像都有ENTRYPOINTof/bin/sh或/bin/bash。
    即使您没有指定ENTRYPOINT，您也可以从您使用FROMDockerfile 中的关键字指定的基础镜像继承它。要ENTRYPOINT在运行时覆盖 ，
    您可以使用--entrypoint. 以下示例将入口点覆盖为 be/bin/ls并将 设置CMD为-l /tmp。

    ```bash
    $ docker run --entrypoint=/bin/ls ubuntu -l /tmp
    ```

  - CMD附加到ENTRYPOINT. 该CMD可以是有效的条款任意字符串ENTRYPOINT，它允许你一次通过多个命令或标志。
    要覆盖CMD运行时，只需在容器名称或 ID 之后添加它。在以下示例中，CMD 被覆盖为/bin/ls -l /tmp。

    ```bash
    $ docker run ubuntu /bin/ls -l /tmp
    ```

  在实践中，ENTRYPOINT并不经常被覆盖。但是，指定 ENTRYPOINT可以使您的图像更灵活且更易于重用。
filesystem: |
  文件系统是操作系统用来命名文件并为其分配位置以进行高效存储和检索的方法。

  例子 ：

  - Linux : overlay2, extfs, btrfs, zfs
  - Windows : NTFS
  - macOS : APFS
image: |
  Docker 镜像是容器的基础。映像是根文件系统更改和在容器运行时中使用的相应执行参数的有序集合。
  图像通常包含堆叠在彼此之上的分层文件系统的联合。图像没有状态，它永远不会改变。
layer: |
  在镜像中，层是对镜像的修改，由 Dockerfile 中的指令表示。图层按顺序应用于基础图像以创建最终图像。更新或重建图像时，仅需要更新更改的图层，而未更改的图层将在本地缓存。
  这就是 Docker 镜像如此快速和轻量级的部分原因。每层的大小加起来等于最终图像的大小。
libcontainer: |
  libcontainer 提供了一个本地 Go 实现，用于创建具有命名空间、cgroup、功能和文件系统访问控制的容器。
  它允许您管理容器的生命周期，在容器创建后执行附加操作。
libnetwork: |
  libnetwork 提供了一个本地 Go 实现，用于创建和管理容器网络命名空间和其他网络资源。
  它管理容器的网络生命周期，在容器创建后执行额外的操作。
namespace: |
  一个[Linux namespace](https://man7.org/linux/man-pages/man7/namespaces.7.html) 是一个Linux内核的功能，分离和虚拟化系统资源。
  受限于命名空间的进程只能与属于同一命名空间的资源或进程交互。命名空间是 Docker 隔离模型的重要组成部分。
  每种类型的资源都存在命名空间，包括net（网络）、mnt（存储）、pid（进程）、uts（主机名控制）和user（UID 映射）。
  有关命名空间的更多信息，请参阅Docker [Docker run reference](/engine/reference/run/) 和 [Isolate containers with a user namespace](/engine/security/userns-remap/)。
node: |
  一个[node](/engine/swarm/how-swarm-mode-works/nodes/)是运行在所述多克尔引擎的实例的物理或虚拟机群模式。
overlay network driver: |
  Overlay 网络驱动程序为集群中的 Docker 容器提供开箱即用的多主机网络连接。
overlay storage driver: |
  OverlayFS 是Linux的文件系统服务，它实现了其他文件系统的 联合挂载。Docker 守护进程支持它作为存储驱动程序。
parent image: |
  镜像的父镜像是FROM在镜像的 Dockerfile中的指令中指定的镜像。所有后续命令均基于此父映像。带有该FROM scratch指令的 Dockerfile不使用父映像，而是创建一个基本映像。
persistent storage: |
  持久存储或卷存储为用户提供了一种向正在运行的容器的文件系统添加持久层的方法。这个持久层可以存在于容器主机或外部设备上。
  这个持久层的生命周期与容器的生命周期无关，允许用户保留状态。
registry: |
  Registry 是一种托管服务，包含 响应 Registry API的图像存储库。

  可以使用Docker Hub 上的浏览器 或使用docker search命令访问默认注册表。
repository: |
  存储库是一组 Docker 映像。可以通过将存储库推送到注册服务器来共享存储库。存储库中的不同图像可以使用标签进行标记。

  这是共享nginx 存储库 及其标签的示例。
SSH: |
  SSH（安全外壳）是一种用于访问远程机器和应用程序的安全协议。它提供身份验证并加密通过不安全网络（例如 Internet）进行的数据通信。
  SSH 使用公钥/私钥对来验证登录。
service: |
  一个[service](/engine/swarm/how-swarm-mode-works/services/)是你要如何在群运行你的应用程序容器的定义。在最基本的层面上，服务定义了要在 swarm 中运行的容器映像以及要在容器中运行的命令。出于编排目的，该服务定义了“期望状态”，即作为任务运行的容器数量和部署容器的约束。

  通常，服务是某个较大应用程序上下文中的微服务。服务的示例可能包括 HTTP 服务器、数据库或您希望在分布式环境中运行的任何其他类型的可执行程序。
service discovery: |
  Swarm 模式容器发现是 swarm 内部的一个 DNS 组件，它自动为 swarm 中覆盖网络上的每个服务分配一个 VIP 和 DNS 条目。网络上的容器通过 gossip 共享服务的 DNS 映射，因此网络上的任何容器都可以通过其服务名称访问该服务。

  您不需要公开特定于服务的端口来使该服务可用于同一覆盖网络上的其他服务。swarm 的内部负载均衡器自动将请求分发到活动任务之间的服务 VIP。
swarm: |
  甲群是在运行的一个或多个发动机多克尔簇群模式。
swarm mode: |
  Swarm 模式是指嵌入在 Docker Engine 中的集群管理和编排功能。当您初始化一个新的 swarm（集群）或将节点加入一个 swarm 时，Docker Engine 以 swarm 模式运行。
tag: |
  标签是应用于存储库中的 Docker 映像的标签。标签是如何区分存储库中的各种图像。
task: |
  甲任务是一个群内的调度的原子单元。一个任务携带一个 Docker 容器和在容器内运行的命令。管理节点根据服务规模中设置的副本数量将任务分配给工作节点。
Union file system: |
  联合文件系统通过创建层实现联合挂载和操作。Docker 结合使用联合文件系统和写时 复制技术为容器提供构建块，使它们非常轻量和快速。

  有关 Docker 和联合文件系统的更多信息，请参阅实践中的 Docker 和 OverlayFS。

  联合文件系统的示例实现是 UnionFS和 OverlayFS。
virtual machine: |
  虚拟机是一种模拟完整计算机并模仿专用硬件的程序。它与其他用户共享物理硬件资源，但隔离操作系统。最终用户在虚拟机上的体验与在专用硬件上的体验相同。

  与容器相比，虚拟机运行起来更重，提供更多的隔离，获得自己的资源集并且共享最少。

  *又称 : VM*
volume: |
  卷是绕过联合文件系统的一个或多个容器中专门指定的目录。卷旨在保留数据，独立于容器的生命周期。因此，当您删除容器时，Docker 永远不会自动删除卷，也不会“垃圾收集”不再被容器引用的卷。 又名：数据量

  有三种类型的卷，主机、匿名和命名

  一个主机卷住在泊坞主机的文件系统，可以从容器中进行访问。

  一个名为量是码头工人管理在磁盘上创建卷，其中一个卷，但它取了一个名字。

  一个匿名的体积类似于一个名为量，但是，它可以是很难参照相同体积随着时间的推移，当它是一个匿名的体积。Docker 处理文件的存储位置。
x86_64: |
  x86_64（或 x86-64）是指 AMD 发明的 64 位指令集，作为英特尔 x86 架构的扩展。AMD 将其 x86_64 架构称为 AMD64，而 Intel 将其实现称为 Intel 64。
